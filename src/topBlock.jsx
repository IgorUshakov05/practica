import {React} from 'react'
import { useState, useEffect } from 'react';

const MyTopBlock = () => {
    const [time,setTime] = useState(null)
    const [date,setDate] = useState(null)

    useEffect(() => {
        const intervalId = setInterval(() => {
          const date = new Date();
          const hour = date.getHours();
          const minutes = date.getMinutes();
          const seconds = date.getSeconds();
          setTime(`${hour > 9 ? hour : "0" + hour}:${minutes > 9 ? minutes : "0" + minutes}:${seconds > 9 ? seconds : "0" + seconds}`);
        }, 1000);

        const dateInerval = setInterval(() => {
            const date = new Date();
            const hour = date.getDay();
            const minutes = date.getMonth();
            const seconds = date.getFullYear();
            setDate(`${hour > 9 ? hour : "0" + hour}:${minutes > 9 ? minutes : "0" + minutes}:${seconds > 9 ? seconds : "0" + seconds}`);
          }, 1000);
    
        // Очищаем интервал при размонтировании компонента
        return () => {
            clearInterval(intervalId)
            clearInterval(dateInerval)
        };
      }, []); // Пустой массив зависимостей гарантирует, что useEffect выполняется только один раз при монтировании компонента
    
    return (
        <div className="topBlockFlex">
        {date === null ? <p>Loading...</p> : <p className="date">{date}</p>}
        {time === null ? <p>Loading...</p> : <p className="date">{time}</p>}
        <svg width="70" height="70" viewBox="0 0 99 94" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="64.5" cy="34.5" r="34.5" fill="#D9D9D9"/>
<path d="M67.2588 10.8135V18.0156H63.4502V10.8135H67.2588ZM66.7949 50.6816V57.249H62.9863V50.6816H66.7949ZM69.4805 42.6738C69.4805 41.7461 69.3096 40.9567 68.9678 40.3057C68.6423 39.6546 68.1051 39.0768 67.3564 38.5723C66.624 38.0677 65.6312 37.5794 64.3779 37.1074C62.262 36.2936 60.3984 35.431 58.7871 34.5195C57.1921 33.5918 55.9469 32.4443 55.0518 31.0771C54.1566 29.6937 53.709 27.944 53.709 25.8281C53.709 23.8099 54.1891 22.0602 55.1494 20.5791C56.1097 19.098 57.4362 17.9587 59.1289 17.1611C60.8379 16.3473 62.8236 15.9404 65.0859 15.9404C66.8112 15.9404 68.3737 16.2008 69.7734 16.7217C71.1732 17.2262 72.3776 17.9749 73.3867 18.9678C74.3958 19.9443 75.1689 21.1406 75.7061 22.5566C76.2432 23.9727 76.5117 25.5921 76.5117 27.415H69.5049C69.5049 26.4385 69.3991 25.5758 69.1875 24.8271C68.9759 24.0785 68.6667 23.4518 68.2598 22.9473C67.8691 22.4427 67.3971 22.0684 66.8438 21.8242C66.2904 21.5638 65.68 21.4336 65.0127 21.4336C64.0199 21.4336 63.2061 21.6289 62.5713 22.0195C61.9365 22.4102 61.4727 22.9391 61.1797 23.6064C60.903 24.2575 60.7646 25.0062 60.7646 25.8525C60.7646 26.6826 60.9111 27.4069 61.2041 28.0254C61.5133 28.6439 62.0423 29.2135 62.791 29.7344C63.5397 30.2389 64.5651 30.7598 65.8672 31.2969C67.9831 32.1107 69.8385 32.9896 71.4336 33.9336C73.0286 34.8776 74.2738 36.0332 75.1689 37.4004C76.0641 38.7676 76.5117 40.5091 76.5117 42.625C76.5117 44.7246 76.0234 46.515 75.0469 47.9961C74.0703 49.4609 72.7031 50.584 70.9453 51.3652C69.1875 52.1302 67.153 52.5127 64.8418 52.5127C63.3444 52.5127 61.8551 52.3174 60.374 51.9268C58.8929 51.5199 57.5501 50.8688 56.3457 49.9736C55.1413 49.0785 54.181 47.8903 53.4648 46.4092C52.7487 44.9118 52.3906 43.0726 52.3906 40.8916H59.4219C59.4219 42.0798 59.5765 43.0726 59.8857 43.8701C60.195 44.6514 60.6019 45.278 61.1064 45.75C61.6273 46.2057 62.2132 46.5312 62.8643 46.7266C63.5153 46.9219 64.1745 47.0195 64.8418 47.0195C65.8835 47.0195 66.738 46.8324 67.4053 46.458C68.0889 46.0837 68.6016 45.571 68.9434 44.9199C69.3014 44.2526 69.4805 43.5039 69.4805 42.6738Z" fill="#888D91"/>
<g filter="url(#filter0_d_0_15)">
<circle cx="37.5" cy="56.5" r="34.5" fill="#D9D9D9"/>
</g>
<path d="M39.8438 61.3291H21.1426V55.6162H39.6729C41.1865 55.6162 42.391 55.3802 43.2861 54.9082C44.1976 54.4362 44.8568 53.7852 45.2637 52.9551C45.6706 52.1087 45.874 51.1484 45.874 50.0742C45.874 49.0163 45.6543 48.0479 45.2148 47.1689C44.7917 46.2738 44.1325 45.5576 43.2373 45.0205C42.3584 44.4671 41.2354 44.1904 39.8682 44.1904H33.3984V74H26.0742V38.4531H39.8438C42.6432 38.4531 45.0358 38.9495 47.0215 39.9424C49.0234 40.9352 50.5615 42.3024 51.6357 44.0439C52.71 45.7855 53.2471 47.7793 53.2471 50.0254C53.2471 52.3854 52.6937 54.4118 51.5869 56.1045C50.4964 57.7972 48.9502 59.0911 46.9482 59.9863C44.9626 60.8815 42.5944 61.3291 39.8438 61.3291ZM41.1865 63.3311V69.0439H21.1426V63.3311H41.1865Z" fill="#888D91"/>
<defs>
<filter id="filter0_d_0_15" x="0" y="19" width="75" height="75" filterUnits="userSpaceOnUse" colorInterpolationFilters="sRGB">
<feFlood floodOpacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feMorphology radius="3" operator="dilate" in="SourceAlpha" result="effect1_dropShadow_0_15"/>
<feOffset/>
<feComposite in2="hardAlpha" operator="out"/>
<feColorMatrix type="matrix" values="0 0 0 0 0.533333 0 0 0 0 0.552941 0 0 0 0 0.568627 0 0 0 1 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_0_15"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_0_15" result="shape"/>
</filter>
</defs>
</svg>

</div>
    )
}

export default MyTopBlock